<?php
// +----------------------------------------------------------------------+
// | VSwoole FrameWork                                                    |
// +----------------------------------------------------------------------+
// | Not Decline To Shoulder a Responsibility                             |
// +----------------------------------------------------------------------+
// | zengzhifei@outlook.com                                               |
// +----------------------------------------------------------------------+

namespace vSwoole\application\server;


use vSwoole\application\server\logic\WebSocketLogic;
use vSwoole\core\server\WebSocketServer;
use vSwoole\library\common\cache\Table;
use vSwoole\library\common\Config;
use vSwoole\library\common\Inotify;
use vSwoole\library\common\Process;
use vSwoole\library\common\cache\Redis;
use vSwoole\library\common\Task;
use vSwoole\library\common\Utils;

class WebSocket extends WebSocketServer
{
    /**
     * 启动服务器
     * WebSocket constructor.
     * @param array $connectOptions
     * @param array $configOptions
     * @throws \ReflectionException
     */
    public function __construct(array $connectOptions = [], array $configOptions = [])
    {
        //创建连接信息记录内存表
        $GLOBALS['link_table'] = new Table(204800);
        $GLOBALS['link_table']->create([
            'fd'        => ['int', 8],
            'link_ip'   => ['string', 16],
            'link_port' => ['int', 8],
            'link_time' => ['string', 10],
            'user_id'   => ['string', 64],
            'range_id'  => ['string', 64],
        ]);
        //创建用户信息记录内存表
        $GLOBALS['user_table'] = new Table(204800);
        $GLOBALS['user_table']->create([
            'fd' => ['int', 8],
        ]);
        //创建归档连接数记录内存表
        $GLOBALS['range_table'] = new Table(1024);
        $GLOBALS['range_table']->create([
            'link_count' => ['int', 8],
        ]);

        parent::__construct($connectOptions, $configOptions); // TODO: Change the autogenerated stub
    }

    /**
     * 主进程启动回调函数
     * @param \swoole_server $server
     * @throws \Exception
     */
    public function onStart(\swoole_server $server)
    {
        parent::onStart($server); // TODO: Change the autogenerated stub

        //写入服务器IP到缓存
        $redis = Redis::getInstance(Config::loadConfig('redis')->get('redis_master'));
        $redis->sAdd(Config::loadConfig('redis')->get('redis_key.WebSocket.Server_Ip'), Utils::getServerIp());
    }

    /**
     * 管理进程启动回调函数
     * @param \swoole_server $server
     */
    public function onManagerStart(\swoole_server $server)
    {
        parent::onManagerStart($server); // TODO: Change the autogenerated stub

        //DEBUG模式下，监听文件变化自动重启
        if (Config::loadConfig('config', true)->get('is_debug')) {
            Process::getInstance()->add(function ($process) use ($server) {
                $process->name(VSWOOLE_WEBSOCKET_SERVER . ' inotify');
                Inotify::getInstance()->watch([VSWOOLE_CONFIG_PATH, VSWOOLE_APP_SERVER_PATH . 'logic/WebSocketLogic.php'], function () use ($server) {
                    $server->reload();
                });
            });
            Process::signalProcess(false);
        }
    }

    /**
     * 工作进程启动回调函数
     * @param \swoole_server $server
     * @param int $worker_id
     */
    public function onWorkerStart(\swoole_server $server, int $worker_id)
    {
        parent::onWorkerStart($server, $worker_id); // TODO: Change the autogenerated stub

        //引入逻辑代码
        $this->logic = new WebSocketLogic($server);
    }

    /**
     * 客户端与WebSocket建立连接成功后回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_http_request $request
     * @throws \ReflectionException
     */
    public function onOpen(\swoole_websocket_server $server, \swoole_http_request $request)
    {
        parent::onOpen($server, $request); // TODO: Change the autogenerated stub

        //异步处理连接
        foreach ($request as $key => $item) {
            $_request[$key] = $item;
        }
        Task::task($server, [$this->logic, 'open'], [$_request ?? []]);
    }

    /**
     * WebSocket服务端接收客户端消息回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_websocket_frame $frame
     * @throws \ReflectionException
     */
    public function onMessage(\swoole_websocket_server $server, \swoole_websocket_frame $frame)
    {
        parent::onMessage($server, $frame); // TODO: Change the autogenerated stub

        //异步处理消息
        Task::task($server, [$this->logic, 'message'], [$frame]);
    }

    /**
     * 异步任务执行回调函数
     * @param \swoole_server $server
     * @param int $task_id
     * @param int $src_worker_id
     * @param $data
     */
    public function onTask(\swoole_server $server, int $task_id, int $src_worker_id, $data)
    {
        parent::onTask($server, $task_id, $src_worker_id, $data); // TODO: Change the autogenerated stub

        //执行异步任务
        Task::execute($server, $data);
    }

    /**
     * 异步任务执行完成回调函数
     * @param \swoole_server $server
     * @param int $task_id
     * @param $data
     */
    public function onFinish(\swoole_server $server, int $task_id, $data)
    {
        parent::onFinish($server, $task_id, $data); // TODO: Change the autogenerated stub

        // 执行异步任务完成回调函数
        Task::finish($data);
    }

    /**
     * 客户端断开回调函数
     * @param \swoole_server $server
     * @param int $fd
     * @param int $reactor_id
     * @throws \ReflectionException
     */
    public function onClose(\swoole_server $server, int $fd, int $reactor_id)
    {
        parent::onClose($server, $fd, $reactor_id); // TODO: Change the autogenerated stub

        //异步删除客户端信息
        Task::task($server, [$this->logic, 'close'], [$fd]);
    }

    /**
     * 主进程结束回调函数
     * @param \swoole_server $server
     * @throws \Exception
     */
    public function onShutdown(\swoole_server $server)
    {
        parent::onShutdown($server); // TODO: Change the autogenerated stub

        //删除缓存服务器IP
        $redis = Redis::getInstance(Config::loadConfig('redis')->get('redis_master'));
        $redis->sRem(Config::loadConfig('redis')->get('redis_key.WebSocket.Server_Ip'), Utils::getServerIp());
    }
}